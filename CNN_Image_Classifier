{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bAEAsk4l5BL7"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "import pandas as pd \n",
        "import numpy as np\n",
        "from matplotlib import pyplot as plt\n",
        "# Load the dataset from keras\n",
        "from tensorflow.keras.datasets import mnist\n",
        "\n",
        "(train_x, train_y), (test_x, test_y) = mnist.load_data()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# test and train data sets size\n",
        "\n",
        "print(\"training data set: x:%s , y:%s\"%(train_x.shape, train_y.shape))\n",
        "print(\"Testing data set: x:%s, y:%s\" % (test_x.shape, test_y.shape))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ODq2cJBC5Loc",
        "outputId": "f723b390-2a1b-40db-c3be-b53a3c2153c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "training data set: x:(60000, 28, 28) , y:(60000,)\n",
            "Testing data set: x:(10000, 28, 28), y:(10000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ndata_train = train_x.shape[0]\n",
        "ndata_test = test_x.shape[0]\n",
        "\n",
        "#Scaling them to be within 0 to 1\n",
        "train_x, test_x = train_x/255, test_x/255\n",
        "\n",
        "#Visualize a few images\n",
        "for i in range(8):\n",
        "  plt.subplot(240 + 1 + i)\n",
        "  plt.imshow(train_x[i], cmap= plt.get_cmap('gray'))\n",
        "  plt.axis('off')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 222
        },
        "id": "JNDwvlNf5NZM",
        "outputId": "b00955e7-ec79-4a32-a9b5-690cb9164791"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Reshaping into a 3D matrix of all images\n",
        "train_x = train_x.reshape((ndata_train,28,28,1))\n",
        "test_x = test_x.reshape((ndata_test,28,28,1))\n",
        "\n",
        "#Recording the shape of x\n",
        "xshape = train_x.shape[1:4]\n",
        "\n",
        "train_x.shape[1:4]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NYVyPini5YTT",
        "outputId": "58d35bed-96db-4544-92aa-37047ad53798"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(28, 28, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from tensorflow._api.v2.nn import softplus, softmax\n",
        "from tensorflow.python.ops.nn_ops import relu\n",
        "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\n",
        "\n",
        "from tensorflow.keras.layers.experimental import preprocessing\n",
        "\n",
        "\n",
        "#Define a Sequential Addition of Layers in TensorFlow/Keras\n",
        "NNmodel = tf.keras.models.Sequential([preprocessing.RandomRotation(factor=0.05, fill_mode='constant'), \n",
        "                                      preprocessing.RandomZoom(height_factor=(-0.1,0.1), width_factor=(-0.1,0.1), fill_mode='constant'),\n",
        "                                      preprocessing.RandomCrop(27,27)])\n",
        "# [preprocessing.RandomRotation(factor=0.05, fill_mode='constant'), preprocessing.RandomZoom(height_factor=(-0.1,0.1), width_factor=(-0.1,0.1), fill_mode='constant')]\n",
        "\n",
        "#Add the first convolution layer\n",
        "NNmodel.add(tf.keras.layers.Conv2D(filters=16,kernel_size = (4,4), activation = tf.nn.relu, input_shape=xshape))\n",
        "\n",
        "NNmodel.add(BatchNormalization())\n",
        "\n",
        "#Add the second convolution layer\n",
        "NNmodel.add(tf.keras.layers.Conv2D(filters=16,kernel_size = (4,4), activation = tf.nn.sigmoid, input_shape=xshape))\n",
        "\n",
        "NNmodel.add(BatchNormalization())\n",
        "\n",
        "#Add the Max Pooling layer\n",
        "NNmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2), strides=1))\n",
        "\n",
        "NNmodel.add(Dropout(0.25))\n",
        "\n",
        "\n",
        "#############################################################################################################\n",
        "#Add the first convolution layer\n",
        "NNmodel.add(tf.keras.layers.Conv2D(filters=32,kernel_size = (4,4), activation = tf.nn.relu, input_shape=xshape))\n",
        "\n",
        "NNmodel.add(BatchNormalization())\n",
        "\n",
        "#Add the second convolution layer\n",
        "NNmodel.add(tf.keras.layers.Conv2D(filters=32,kernel_size = (4,4), activation = tf.nn.sigmoid, input_shape=xshape))\n",
        "\n",
        "NNmodel.add(BatchNormalization())\n",
        "\n",
        "#Add the Max Pooling layer\n",
        "NNmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2), strides=1))\n",
        "\n",
        "NNmodel.add(Dropout(0.25))\n",
        "#############################################################################################################\n",
        "\n",
        "\n",
        "#############################################################################################################\n",
        "#Add the first convolution layer\n",
        "NNmodel.add(tf.keras.layers.Conv2D(filters=64,kernel_size = (4,4), activation = tf.nn.relu, input_shape=xshape))\n",
        "\n",
        "NNmodel.add(BatchNormalization())\n",
        "\n",
        "#Add the second convolution layer\n",
        "NNmodel.add(tf.keras.layers.Conv2D(filters=64,kernel_size = (4,4), activation = tf.nn.sigmoid, input_shape=xshape))\n",
        "\n",
        "NNmodel.add(BatchNormalization())\n",
        "\n",
        "#Add the Max Pooling layer\n",
        "NNmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2), strides=1))\n",
        "\n",
        "NNmodel.add(Dropout(0.25))\n",
        "#############################################################################################################\n",
        "\n",
        "\n",
        "#Flattten the convoluted and pooled output\n",
        "NNmodel.add(tf.keras.layers.Flatten())\n",
        "\n",
        "#Add the dense layer - with relu activation\n",
        "NNmodel.add(tf.keras.layers.Dense(512, activation=relu, kernel_regularizer=tf.keras.regularizers.l1(0.0002)))\n",
        "NNmodel.add(Dropout(0.25))\n",
        "\n",
        "#Add another dense layer - with softplus activation\n",
        "NNmodel.add(tf.keras.layers.Dense(1024, activation=softplus, kernel_regularizer=tf.keras.regularizers.l1(0.0005)))\n",
        "NNmodel.add(Dropout(0.5))\n",
        "\n",
        "#Add another dense layer - with softmax activation\n",
        "NNmodel.add(tf.keras.layers.Dense(10, activation=softmax))\n",
        "\n",
        "NNmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "NNmodel.build(train_x.shape)\n",
        "\n",
        "NNmodel.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BFxdzLgc6oI2",
        "outputId": "b6866fda-dc9b-4c1f-9ba5-761036bf9cfa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " random_rotation_2 (RandomRo  (60000, 28, 28, 1)       0         \n",
            " tation)                                                         \n",
            "                                                                 \n",
            " random_zoom_2 (RandomZoom)  (60000, 28, 28, 1)        0         \n",
            "                                                                 \n",
            " random_crop_2 (RandomCrop)  (60000, 27, 27, 1)        0         \n",
            "                                                                 \n",
            " conv2d_12 (Conv2D)          (60000, 24, 24, 16)       272       \n",
            "                                                                 \n",
            " batch_normalization_12 (Bat  (60000, 24, 24, 16)      64        \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " conv2d_13 (Conv2D)          (60000, 21, 21, 16)       4112      \n",
            "                                                                 \n",
            " batch_normalization_13 (Bat  (60000, 21, 21, 16)      64        \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " max_pooling2d_6 (MaxPooling  (60000, 20, 20, 16)      0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " dropout_10 (Dropout)        (60000, 20, 20, 16)       0         \n",
            "                                                                 \n",
            " conv2d_14 (Conv2D)          (60000, 17, 17, 32)       8224      \n",
            "                                                                 \n",
            " batch_normalization_14 (Bat  (60000, 17, 17, 32)      128       \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " conv2d_15 (Conv2D)          (60000, 14, 14, 32)       16416     \n",
            "                                                                 \n",
            " batch_normalization_15 (Bat  (60000, 14, 14, 32)      128       \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " max_pooling2d_7 (MaxPooling  (60000, 13, 13, 32)      0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " dropout_11 (Dropout)        (60000, 13, 13, 32)       0         \n",
            "                                                                 \n",
            " conv2d_16 (Conv2D)          (60000, 10, 10, 64)       32832     \n",
            "                                                                 \n",
            " batch_normalization_16 (Bat  (60000, 10, 10, 64)      256       \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " conv2d_17 (Conv2D)          (60000, 7, 7, 64)         65600     \n",
            "                                                                 \n",
            " batch_normalization_17 (Bat  (60000, 7, 7, 64)        256       \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " max_pooling2d_8 (MaxPooling  (60000, 6, 6, 64)        0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " dropout_12 (Dropout)        (60000, 6, 6, 64)         0         \n",
            "                                                                 \n",
            " flatten_2 (Flatten)         (60000, 2304)             0         \n",
            "                                                                 \n",
            " dense_6 (Dense)             (60000, 512)              1180160   \n",
            "                                                                 \n",
            " dropout_13 (Dropout)        (60000, 512)              0         \n",
            "                                                                 \n",
            " dense_7 (Dense)             (60000, 1024)             525312    \n",
            "                                                                 \n",
            " dropout_14 (Dropout)        (60000, 1024)             0         \n",
            "                                                                 \n",
            " dense_8 (Dense)             (60000, 10)               10250     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,844,074\n",
            "Trainable params: 1,843,626\n",
            "Non-trainable params: 448\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "history = NNmodel.fit(train_x, train_y, epochs = 10, validation_split=0.2, batch_size=200, verbose=0)\n",
        "\n",
        "train_acc = NNmodel.evaluate(train_x, train_y, verbose=1)\n",
        "test_acc = NNmodel.evaluate(test_x, test_y, verbose=1)\n",
        "print(\"train loss and accuracy\")\n",
        "print(train_acc)\n",
        "print(\"test loss and accuracy\")\n",
        "print(test_acc)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-xZoLws36vmo",
        "outputId": "383d76a0-a18e-4e8c-c056-82378cbbbdc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1875/1875 [==============================] - 9s 4ms/step - loss: 0.2408 - accuracy: 0.9916\n",
            "313/313 [==============================] - 1s 4ms/step - loss: 0.2430 - accuracy: 0.9907\n",
            "train loss and accuracy\n",
            "[0.24082159996032715, 0.9915833473205566]\n",
            "test loss and accuracy\n",
            "[0.24299423396587372, 0.9907000064849854]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Both the training and validation accuracies have been found to be more than 99%**\n"
      ],
      "metadata": {
        "id": "Gd2pg7E6MbZS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Retrain the model on the entire  data and save the model"
      ],
      "metadata": {
        "id": "vHbcXqMl_0se"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.callbacks import EarlyStopping, ModelCheckpoint\n",
        "from keras.models import load_model\n",
        "\n",
        "# Create whole X and Y data\n",
        "X = np.append(train_x, test_x, axis=0)\n",
        "Y = np.append(train_y, test_y, axis=0)\n",
        "\n",
        "\n",
        "# simple early stopping\n",
        "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1)\n",
        "mc = ModelCheckpoint('best_model.h5', monitor='val_accuracy', mode='max', verbose=1, save_best_only=True)\n",
        "NNmodel.save(\"best_model.h5\")\n",
        "print(\"saved the best model\")\n",
        "# fit model\n",
        "history = NNmodel.fit(X, Y, epochs = 10, validation_split=0.2, batch_size=200, verbose=1, callbacks=[es])\n",
        "# evaluate the model\n",
        "train_acc = NNmodel.evaluate(X, Y, verbose=0)\n",
        "test_acc = NNmodel.evaluate(test_x, test_y, verbose=0)\n",
        "print(\"train loss and accuracy\")\n",
        "print(train_acc)\n",
        "print(\"test loss and accuracy\")\n",
        "print(test_acc)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RT0XVRH26ztH",
        "outputId": "984d7c83-2daf-4ba5-a28f-35eaeedd3c12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "saved the best model\n",
            "Epoch 1/10\n",
            "280/280 [==============================] - 5s 17ms/step - loss: 0.2981 - accuracy: 0.9769 - val_loss: 0.2780 - val_accuracy: 0.9860\n",
            "Epoch 2/10\n",
            "280/280 [==============================] - 5s 16ms/step - loss: 0.2939 - accuracy: 0.9780 - val_loss: 0.2228 - val_accuracy: 0.9926\n",
            "Epoch 2: early stopping\n",
            "train loss and accuracy\n",
            "[0.2210293412208557, 0.9936857223510742]\n",
            "test loss and accuracy\n",
            "[0.22163589298725128, 0.9930999875068665]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here we can see that both the training and testing accuracies have been been improved owing to more no of examples for the model to learn from. As the increase in both test and train is comparable we can consider that the model is able to generalize well and isn't overfitting. This can help the model to generalize better and make more accurate predictions on unseen data."
      ],
      "metadata": {
        "id": "yfmo9HrjHM2B"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Check the images misclassified"
      ],
      "metadata": {
        "id": "wI2jwDR7CydH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# get the predictions\n",
        "predictions = NNmodel.predict(X)\n",
        "\n",
        "# convert the predictions to a categorical format\n",
        "predictions = tf.argmax(predictions, axis=1)\n",
        "\n",
        "# get the misclassified records\n",
        "misclassified = tf.not_equal(predictions, Y)\n",
        "misclassified_indices = tf.where(misclassified)\n",
        "misclassified_images = tf.gather(X, misclassified_indices)\n",
        "misclassified_labels = tf.gather(Y, misclassified_indices)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qsbZz-_lCx4A",
        "outputId": "19741305-ebc2-4cc6-9e2f-2aaeed1bf07d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2188/2188 [==============================] - 7s 3ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# convert tensor to numpy array\n",
        "image_np = misclassified_images[0].numpy()\n",
        "# reshape the image to 28x28 pixels\n",
        "image_np = np.reshape(image_np, (28,28))\n",
        "# plot the image\n",
        "plt.imshow(image_np, cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "misclassified_predictions = tf.gather(predictions, misclassified_indices)\n",
        "misclassified_labels = tf.gather(Y, misclassified_indices)\n",
        "\n",
        "print(\"Predicted label: \", misclassified_predictions[0])\n",
        "print(\"True label: \", misclassified_labels[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "32mOUf_aEofP",
        "outputId": "5d8ae3e8-8028-4013-8141-f70e1e503d61"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted label:  tf.Tensor([2], shape=(1,), dtype=int64)\n",
            "True label:  tf.Tensor([1], shape=(1,), dtype=uint8)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# convert tensor to numpy array\n",
        "image_np = misclassified_images[1].numpy()\n",
        "# reshape the image to 28x28 pixels\n",
        "image_np = np.reshape(image_np, (28,28))\n",
        "# plot the image\n",
        "plt.imshow(image_np, cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "misclassified_predictions = tf.gather(predictions, misclassified_indices)\n",
        "misclassified_labels = tf.gather(Y, misclassified_indices)\n",
        "\n",
        "print(\"Predicted label: \", misclassified_predictions[1])\n",
        "print(\"True label: \", misclassified_labels[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "7TQ0phwdEw25",
        "outputId": "cc4a7592-233e-44e2-b357-03169d10997d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted label:  tf.Tensor([8], shape=(1,), dtype=int64)\n",
            "True label:  tf.Tensor([9], shape=(1,), dtype=uint8)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# convert tensor to numpy array\n",
        "image_np = misclassified_images[2].numpy()\n",
        "# reshape the image to 28x28 pixels\n",
        "image_np = np.reshape(image_np, (28,28))\n",
        "# plot the image\n",
        "plt.imshow(image_np, cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "misclassified_predictions = tf.gather(predictions, misclassified_indices)\n",
        "misclassified_labels = tf.gather(Y, misclassified_indices)\n",
        "\n",
        "print(\"Predicted label: \", misclassified_predictions[2])\n",
        "print(\"True label: \", misclassified_labels[2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "7YUPGXo1GJMp",
        "outputId": "334685fb-b42f-448e-9eb4-878f73a4c2d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAANnUlEQVR4nO3dX6xV9ZnG8ecBWxOlJqCZE0LJtFP0AicGJoSIbYjGgA6anNPEYElsGGMGEqspWnWIE1PuNGpphhsijQgdO0K1NaDWDgw2ksbYeDQMotIj00B6+DuVi1JiwgjvXJyFOcWzf/uw/8P7/SQne+/17rXXmxUe1trrz/45IgTg4jeh2w0A6AzCDiRB2IEkCDuQBGEHkrikkwuzzaF/oM0iwmNNb2rLbvtW27+3vc/2ymY+C0B7udHz7LYnShqStEDSsKR3JC2JiA8L87BlB9qsHVv2uZL2RcQfIuKUpE2S+pv4PABt1EzYp0n646jXw9W0v2J7me1B24NNLAtAk9p+gC4i1klaJ7EbD3RTM1v2g5Kmj3r91WoagB7UTNjfkXS17a/b/rKk70ja2pq2ALRaw7vxEfGZ7fsk/aekiZLWR8QHLesMQEs1fOqtoYXxnR1ou7ZcVAPgwkHYgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJAg7kARhB5Ig7EAShB1IgrADSRB2IAnCDiRB2IEkCDuQBGEHkiDsQBKEHUiCsANJEHYgCcIOJEHYgSQIO5AEYQeSIOxAEoQdSKLh8dklyfZ+SScknZb0WUTMaUVTAFqvqbBXboqIP7XgcwC0EbvxQBLNhj0kbbP9ru1lY73B9jLbg7YHm1wWgCY4Ihqf2Z4WEQdt/42k7ZLuj4idhfc3vjAA4xIRHmt6U1v2iDhYPR6T9LKkuc18HoD2aTjsti+3/ZWzzyUtlLSnVY0BaK1mjsb3SXrZ9tnP+Y+I+HVLugLQck19Zz/vhfGdHWi7tnxnB3DhIOxAEoQdSIKwA0kQdiCJVtwIA3TFAw88UKw/9thjNWsbN24szrt27dpifWhoqFjvRWzZgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiAJ7nq7CNx88801a1OmTGnqs1988cWm5i+5/vrri/Xp06cX65s2bSrWS/+2P/nkk+K8/f39xfrbb79drHcTd70ByRF2IAnCDiRB2IEkCDuQBGEHkiDsQBLcz94C11xzTbFe71z36tWri/V610Jce+21NWuHDh0qzlvvfHO98+xXXnllsb5gwYKatTVr1hTnbfYagZJt27YV6718Hr1RbNmBJAg7kARhB5Ig7EAShB1IgrADSRB2IAnuZx+nSy+9tGat3rnoRYsWFevVsNc1nTx5slgvnSu/9957i/O+/vrrxfpdd91VrC9fvrxYnzdvXrHejHrr7a233qpZGxgYKM5b7/qDXtbw/ey219s+ZnvPqGlTbG+3/XH1OLmVzQJovfHsxm+QdOs501ZK2hERV0vaUb0G0MPqhj0idko6fs7kfklnx8/ZKKm8TwSg6xq9Nr4vIg5Xz49I6qv1RtvLJC1rcDkAWqTpG2EiIkoH3iJinaR10oV9gA640DV66u2o7amSVD0ea11LANqh0bBvlbS0er5U0pbWtAOgXeruxtt+QdKNkq6yPSzph5KekPRz2/dIOiBpcTub7AWrVq2qWat3Hr2eN998s1h/6qmnivXSufKlS5fWrEnS008/XazXGwO9k9dpnK/h4eGatQv5PHqj6oY9IpbUKNUemQBAz+FyWSAJwg4kQdiBJAg7kARhB5Lgp6QrixeXzx4+8sgjbVv2ww8/XKzPnz+/WL/llltq1u6///6GejprwoTy9uCZZ54p1h9//PGatSeffLI47x133FGs1+tt586dxXo2bNmBJAg7kARhB5Ig7EAShB1IgrADSRB2IAnOs1deeeWVYn39+vU1a3fffXdTy96+fXuxfsUVVzT82aWfU5bKt4FK0kMPPVSsHzlypFg/ffp0sV5S7/bZvXv3FuubN29ueNkXI7bsQBKEHUiCsANJEHYgCcIOJEHYgSQIO5AE59krn376abH+4IMP1qydOnWqOO91111XrN9www3F+uDgYLE+NDRUs7ZixYrivO3+SeXbb7+9Zu2mm25q6rPXrl1brB8/fu4QhbmxZQeSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJNzJIXdt9+74vl1U7/fRX3vttWK93jUC7XTZZZcV66XhqGfPnt3Usi+5hMtExhIRHmt63S277fW2j9neM2raKtsHbe+q/poboBxA241nN36DpFvHmP7jiJhV/f2qtW0BaLW6YY+InZK47hC4wDVzgO4+27ur3fzJtd5ke5ntQdvlC7wBtFWjYV8r6RuSZkk6LOlHtd4YEesiYk5EzGlwWQBaoKGwR8TRiDgdEWck/UTS3Na2BaDVGgq77amjXn5b0p5a7wXQG+qeqLT9gqQbJV1le1jSDyXdaHuWpJC0X9LyNvZ40XvppZe63ULDbrvttmK9mXPpW7ZsaXhefFHdsEfEkjEmP9uGXgC0EZfLAkkQdiAJwg4kQdiBJAg7kAT3CKKt7DHvtpQknThxojjvmjVrWt1OamzZgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiAJfkoaTdm9e3exPnPmzJq1V199tTjvwMBAQz1l1/BPSQO4OBB2IAnCDiRB2IEkCDuQBGEHkiDsQBLcz46ilStXFuszZsxo+LOff/75hufF+WPLDiRB2IEkCDuQBGEHkiDsQBKEHUiCsANJcD87ik6fPl2s1/v3MzQ0VLO2cOHC4rzDw8PFOsbW8P3stqfb/o3tD21/YPv71fQptrfb/rh6nNzqpgG0znh24z+T9IOImCnpeknfsz1T0kpJOyLiakk7qtcAelTdsEfE4Yh4r3p+QtJHkqZJ6pe0sXrbRkn8hhDQw87r2njbX5M0W9LvJPVFxOGqdERSX415lkla1niLAFph3EfjbU+S9AtJKyLiz6NrMXKUZswjNRGxLiLmRMScpjoF0JRxhd32lzQS9J9FxC+ryUdtT63qUyUda0+LAFqh7m68R8bcfVbSRxGxelRpq6Slkp6oHre0pUO0VX9/f1s/f8OGDTVrnFrrrPF8Z/+mpO9Ket/2rmraoxoJ+c9t3yPpgKTF7WkRQCvUDXtE/FbSmCfpJd3c2nYAtAuXywJJEHYgCcIOJEHYgSQIO5AEPyWd3Pz584v1CRPK24O9e/cW65s3bz7vntAebNmBJAg7kARhB5Ig7EAShB1IgrADSRB2IAnOsydX76egz5w5U6zv2rWrWD9w4MB594T2YMsOJEHYgSQIO5AEYQeSIOxAEoQdSIKwA0lwnv0i19c35qhcn7vzzjs71Am6jS07kARhB5Ig7EAShB1IgrADSRB2IAnCDiQxnvHZp0v6qaQ+SSFpXUT8m+1Vkv5Z0v9Wb300In7VrkbRmIkTJxbrkyZNaurz582bV6zPmDGjZm3fvn1NLRvnZzwX1Xwm6QcR8Z7tr0h61/b2qvbjiHi6fe0BaJXxjM9+WNLh6vkJ2x9JmtbuxgC01nl9Z7f9NUmzJf2umnSf7d2219ueXGOeZbYHbQ821SmApow77LYnSfqFpBUR8WdJayV9Q9IsjWz5fzTWfBGxLiLmRMScFvQLoEHjCrvtL2kk6D+LiF9KUkQcjYjTEXFG0k8kzW1fmwCaVTfsti3pWUkfRcTqUdOnjnrbtyXtaX17AFplPEfjvynpu5Let332d4MflbTE9iyNnI7bL2l5WzpEUw4dOlSsDwwMFOtvvPFGsf7cc88V6ydPnizW0TnjORr/W0keo8Q5deACwhV0QBKEHUiCsANJEHYgCcIOJEHYgSRcb8jeli7M7tzCgKQiYqxT5WzZgSwIO5AEYQeSIOxAEoQdSIKwA0kQdiCJTg/Z/CdJB0a9vqqa1ot6tbde7Uuit0a1sre/rVXo6EU1X1i4Pdirv03Xq731al8SvTWqU72xGw8kQdiBJLod9nVdXn5Jr/bWq31J9NaojvTW1e/sADqn21t2AB1C2IEkuhJ227fa/r3tfbZXdqOHWmzvt/2+7V3dHp+uGkPvmO09o6ZNsb3d9sfV45hj7HWpt1W2D1brbpftRV3qbbrt39j+0PYHtr9fTe/quiv01ZH11vHv7LYnShqStEDSsKR3JC2JiA872kgNtvdLmhMRXb8Aw/Z8SX+R9NOI+Ptq2pOSjkfEE9V/lJMj4l96pLdVkv7S7WG8q9GKpo4eZlzSgKR/UhfXXaGvxerAeuvGln2upH0R8YeIOCVpk6T+LvTR8yJip6Tj50zul7Sxer5RI/9YOq5Gbz0hIg5HxHvV8xOSzg4z3tV1V+irI7oR9mmS/jjq9bB6a7z3kLTN9ru2l3W7mTH0RcTh6vkRSX3dbGYMdYfx7qRzhhnvmXXXyPDnzeIA3Rd9KyL+QdI/Svpetbvak2LkO1gvnTsd1zDenTLGMOOf6+a6a3T482Z1I+wHJU0f9fqr1bSeEBEHq8djkl5W7w1FffTsCLrV47Eu9/O5XhrGe6xhxtUD666bw593I+zvSLra9tdtf1nSdyRt7UIfX2D78urAiWxfLmmhem8o6q2SllbPl0ra0sVe/kqvDONda5hxdXnddX3484jo+J+kRRo5Iv8/kv61Gz3U6OvvJP139fdBt3uT9IJGduv+TyPHNu6RdKWkHZI+lvRfkqb0UG//Lul9Sbs1EqypXertWxrZRd8taVf1t6jb667QV0fWG5fLAklwgA5IgrADSRB2IAnCDiRB2IEkCDuQBGEHkvh/OjZGdDikkWQAAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted label:  tf.Tensor([7], shape=(1,), dtype=int64)\n",
            "True label:  tf.Tensor([9], shape=(1,), dtype=uint8)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### As we can see the images which have been misclassified are very difficult even for a human to interpret. I think the author of this image after a few days may not be able to recognize such images. \n",
        "\n",
        "#### Therefore it isn't reasonable to expect 100% accuracy - if anyone claims 100% accuracy it should be by fluke and doesn't represent the real world scenario"
      ],
      "metadata": {
        "id": "7wYODVEUGRwx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# create a confusion matrix to store the mix-up counts\n",
        "confusion_matrix = tf.math.confusion_matrix(Y, predictions)\n",
        "\n",
        "confusion_matrix"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FctyCWp3IpLq",
        "outputId": "3ae39d3d-b2c6-4c4e-a3b6-cd88feada2d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(10, 10), dtype=int32, numpy=\n",
              "array([[6873,    1,    2,    2,    1,    0,   19,    1,    2,    2],\n",
              "       [   0, 7831,   11,    4,    1,    9,    3,   17,    0,    1],\n",
              "       [   2,    3, 6954,    4,    0,    0,    0,   24,    3,    0],\n",
              "       [   0,    0,    9, 7097,    0,   23,    0,    2,    8,    2],\n",
              "       [   0,    4,    1,    0, 6782,    0,    1,    4,    0,   32],\n",
              "       [   2,    0,    1,   11,    0, 6252,   35,    2,    8,    2],\n",
              "       [   5,    3,    2,    1,    5,    5, 6853,    0,    2,    0],\n",
              "       [   0,    6,    5,    4,    2,    0,    0, 7268,    1,    7],\n",
              "       [   3,    6,   11,    4,    6,    5,    9,    4, 6768,    9],\n",
              "       [   0,    1,    0,    2,   37,    6,    0,   23,    9, 6880]],\n",
              "      dtype=int32)>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "# Visualising confusion matrix\n",
        "plt.figure(figsize = (16,14),facecolor='white')\n",
        "heatmap = sns.heatmap(confusion_matrix, annot = True, annot_kws = {'size': 20}, fmt = 'd', cmap = 'YlGnBu')\n",
        "heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation = 0, ha = 'right', fontsize = 18, weight='bold')\n",
        "heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation = 0, ha = 'right', fontsize = 18, weight='bold')\n",
        "\n",
        "plt.title('Confusion Matrix\\n', fontsize = 18, color = 'darkblue')\n",
        "plt.ylabel('True label', fontsize = 14)\n",
        "plt.xlabel('Predicted label', fontsize = 14)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 876
        },
        "id": "ivnt9hZpKXiU",
        "outputId": "2873ebb7-2480-47a3-9067-46669db0ca2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x1008 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# find the 2nd most common mix-up for each label\n",
        "common_mixup = {}\n",
        "for i in range(10):\n",
        "    # find the index of the highest mix-up count for the current label\n",
        "    max_index = tf.argmax(confusion_matrix[i, :])\n",
        "    # find the count of the highest mix-up\n",
        "    max_value = tf.reduce_max(confusion_matrix[i, :])\n",
        "    # find the index of the second highest mix-up count for the current label\n",
        "    second_max_index = tf.argsort(confusion_matrix[i, :],direction='DESCENDING')[1]\n",
        "    second_max_value = confusion_matrix[i][second_max_index]\n",
        "    common_mixup[i] = (second_max_index, second_max_value)\n",
        "    \n",
        "# print the 2nd common mix-up for each label\n",
        "for label, mixup in common_mixup.items():\n",
        "    print(\"Label: \", label, \" - 2nd Common mix-up: \", mixup[0], \" - Mix-up count: \", mixup[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3DApjcgSJI58",
        "outputId": "a213f279-2c79-47bb-beea-e29e9bf4f7c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Label:  0  - 2nd Common mix-up:  tf.Tensor(6, shape=(), dtype=int32)  - Mix-up count:  tf.Tensor(19, shape=(), dtype=int32)\n",
            "Label:  1  - 2nd Common mix-up:  tf.Tensor(7, shape=(), dtype=int32)  - Mix-up count:  tf.Tensor(17, shape=(), dtype=int32)\n",
            "Label:  2  - 2nd Common mix-up:  tf.Tensor(7, shape=(), dtype=int32)  - Mix-up count:  tf.Tensor(24, shape=(), dtype=int32)\n",
            "Label:  3  - 2nd Common mix-up:  tf.Tensor(5, shape=(), dtype=int32)  - Mix-up count:  tf.Tensor(23, shape=(), dtype=int32)\n",
            "Label:  4  - 2nd Common mix-up:  tf.Tensor(9, shape=(), dtype=int32)  - Mix-up count:  tf.Tensor(32, shape=(), dtype=int32)\n",
            "Label:  5  - 2nd Common mix-up:  tf.Tensor(6, shape=(), dtype=int32)  - Mix-up count:  tf.Tensor(35, shape=(), dtype=int32)\n",
            "Label:  6  - 2nd Common mix-up:  tf.Tensor(0, shape=(), dtype=int32)  - Mix-up count:  tf.Tensor(5, shape=(), dtype=int32)\n",
            "Label:  7  - 2nd Common mix-up:  tf.Tensor(9, shape=(), dtype=int32)  - Mix-up count:  tf.Tensor(7, shape=(), dtype=int32)\n",
            "Label:  8  - 2nd Common mix-up:  tf.Tensor(2, shape=(), dtype=int32)  - Mix-up count:  tf.Tensor(11, shape=(), dtype=int32)\n",
            "Label:  9  - 2nd Common mix-up:  tf.Tensor(4, shape=(), dtype=int32)  - Mix-up count:  tf.Tensor(37, shape=(), dtype=int32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can see that the most common mix up pairs are (6 and 8), (4 with 9), (7 with 1) and (9 with 4). This makes sense as the strokes in writing these numbers are very similar and the authors are prone to write these numbers with ambiguity for even normal humans to read and thus could be misclassified by the model."
      ],
      "metadata": {
        "id": "NzP137H8Jd6C"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Load the saved model trained on entire data"
      ],
      "metadata": {
        "id": "Am5gLDkhCYyD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# load and evaluate a saved model\n",
        "from numpy import loadtxt\n",
        "from tensorflow.keras.models import load_model\n",
        " \n",
        "# load model\n",
        "saved_model = load_model('best_model.h5')\n",
        "# summarize model.\n",
        "saved_model.summary()\n",
        "\n",
        "# evaluate the model\n",
        "score = saved_model.evaluate(test_x, test_y, verbose=0)\n",
        "print(\"%s: %.2f%%\" % (saved_model.metrics_names[1], score[1]*100))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zxIpnJFr7JfE",
        "outputId": "6d59d408-08bd-4268-801c-12e3ec6a3812"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " random_rotation_2 (RandomRo  (None, 28, 28, 1)        0         \n",
            " tation)                                                         \n",
            "                                                                 \n",
            " random_zoom_2 (RandomZoom)  (None, 28, 28, 1)         0         \n",
            "                                                                 \n",
            " random_crop_2 (RandomCrop)  (None, 27, 27, 1)         0         \n",
            "                                                                 \n",
            " conv2d_12 (Conv2D)          (None, 24, 24, 16)        272       \n",
            "                                                                 \n",
            " batch_normalization_12 (Bat  (None, 24, 24, 16)       64        \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " conv2d_13 (Conv2D)          (None, 21, 21, 16)        4112      \n",
            "                                                                 \n",
            " batch_normalization_13 (Bat  (None, 21, 21, 16)       64        \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " max_pooling2d_6 (MaxPooling  (None, 20, 20, 16)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " dropout_10 (Dropout)        (None, 20, 20, 16)        0         \n",
            "                                                                 \n",
            " conv2d_14 (Conv2D)          (None, 17, 17, 32)        8224      \n",
            "                                                                 \n",
            " batch_normalization_14 (Bat  (None, 17, 17, 32)       128       \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " conv2d_15 (Conv2D)          (None, 14, 14, 32)        16416     \n",
            "                                                                 \n",
            " batch_normalization_15 (Bat  (None, 14, 14, 32)       128       \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " max_pooling2d_7 (MaxPooling  (None, 13, 13, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " dropout_11 (Dropout)        (None, 13, 13, 32)        0         \n",
            "                                                                 \n",
            " conv2d_16 (Conv2D)          (None, 10, 10, 64)        32832     \n",
            "                                                                 \n",
            " batch_normalization_16 (Bat  (None, 10, 10, 64)       256       \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " conv2d_17 (Conv2D)          (None, 7, 7, 64)          65600     \n",
            "                                                                 \n",
            " batch_normalization_17 (Bat  (None, 7, 7, 64)         256       \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " max_pooling2d_8 (MaxPooling  (None, 6, 6, 64)         0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " dropout_12 (Dropout)        (None, 6, 6, 64)          0         \n",
            "                                                                 \n",
            " flatten_2 (Flatten)         (None, 2304)              0         \n",
            "                                                                 \n",
            " dense_6 (Dense)             (None, 512)               1180160   \n",
            "                                                                 \n",
            " dropout_13 (Dropout)        (None, 512)               0         \n",
            "                                                                 \n",
            " dense_7 (Dense)             (None, 1024)              525312    \n",
            "                                                                 \n",
            " dropout_14 (Dropout)        (None, 1024)              0         \n",
            "                                                                 \n",
            " dense_8 (Dense)             (None, 10)                10250     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,844,074\n",
            "Trainable params: 1,843,626\n",
            "Non-trainable params: 448\n",
            "_________________________________________________________________\n",
            "accuracy: 99.07%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Test the Saved Model on one image"
      ],
      "metadata": {
        "id": "Uleb8I4LLUBJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "to_predict = np.array([train_x[8]])\n",
        "\n",
        "output = saved_model.predict(to_predict)\n",
        "\n",
        "pixels = to_predict[0].reshape((28, 28))\n",
        "\n",
        "plt.imshow(pixels, cmap='gray')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "ALgIR_gN8oJm",
        "outputId": "91e2b8f7-bc89-4b2a-b932-df23d9341fea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 165ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f28aa4ae520>"
            ]
          },
          "metadata": {},
          "execution_count": 50
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.argmax(output)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WbkZwjPP9nZ-",
        "outputId": "aaef0817-14f6-4067-cdb6-09250c7d2199"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Anvil Code Here"
      ],
      "metadata": {
        "id": "Sr0vCcpNLaNb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "UWsAIZOVY6NC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 338
        },
        "outputId": "3d8c118d-dfcd-4960-ef2f-3dc0e004bda7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "MessageError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mMessageError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-22-d5df0069828e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, readonly)\u001b[0m\n\u001b[1;32m     99\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m120000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreadonly\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m   \u001b[0;34m\"\"\"Mount your Google Drive at the specified mountpoint path.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 101\u001b[0;31m   return _mount(\n\u001b[0m\u001b[1;32m    102\u001b[0m       \u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m       \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_remount\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36m_mount\u001b[0;34m(mountpoint, force_remount, timeout_ms, ephemeral, readonly)\u001b[0m\n\u001b[1;32m    122\u001b[0m       'TBE_EPHEM_CREDS_ADDR'] if ephemeral else _os.environ['TBE_CREDS_ADDR']\n\u001b[1;32m    123\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mephemeral\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 124\u001b[0;31m     _message.blocking_request(\n\u001b[0m\u001b[1;32m    125\u001b[0m         'request_auth', request={'authType': 'dfs_ephemeral'}, timeout_sec=None)\n\u001b[1;32m    126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mblocking_request\u001b[0;34m(request_type, request, timeout_sec, parent)\u001b[0m\n\u001b[1;32m    169\u001b[0m   request_id = send_request(\n\u001b[1;32m    170\u001b[0m       request_type, request, parent=parent, expect_reply=True)\n\u001b[0;32m--> 171\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m    100\u001b[0m         reply.get('colab_msg_id') == message_id):\n\u001b[1;32m    101\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;34m'error'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mMessageError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mMessageError\u001b[0m: Error: credential propagation was unsuccessful"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0FLw0vAZLHLq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@anvil.server.callable\n",
        "def test_func(fetch_array):\n",
        " return_value = np.argmax(saved_model.predict(np.expand_dims(np.expand_dims(fetch_array, axis=0), axis=3)), axis=1)[0] # saved_model is the model to be used to predict\n",
        " return return_value"
      ],
      "metadata": {
        "id": "NzqlW8qvLhhN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "anvil.server.wait_forever()"
      ],
      "metadata": {
        "id": "mcYaWAigLli-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from numpy import loadtxt\n",
        "from tensorflow.keras.models import load_model\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        " \n",
        "\n",
        "fetch_array = np.array([train_x[8]])\n",
        " \n",
        "# load model\n",
        "saved_model = load_model('best_model.h5')\n",
        "#return_value = np.argmax(saved_model.predict(np.expand_dims(np.expand_dims(fetch_array, axis=0), axis=3)), axis=1)[0] # saved_model is the model to be used to predict\n",
        "return_value = np.argmax(saved_model.predict(fetch_array))# saved_model is the model to be used to predict\n",
        "return_value"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X3Buzl_FM33O",
        "outputId": "8969e5e8-c152-42cc-d9bd-a559b91fb3ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 399ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr = [[6873,    1,    2,    2,    1,    0,   19,    1,    2,    2],\n",
        "       [   0, 7831,   11,    4,    1,    9,    3,   17,    0,    1],\n",
        "       [   2,    3, 6954,    4,    0,    0,    0,   24,    3,    0],\n",
        "       [   0,    0,    9, 7097,    0,   23,    0,    2,    8,    2],\n",
        "       [   0,    4,    1,    0, 6782,    0,    1,    4,    0,   32],\n",
        "       [   2,    0,    1,   11,    0, 6252,   35,    2,    8,    2],\n",
        "       [   5,    3,    2,    1,    5,    5, 6853,    0,    2,    0],\n",
        "       [   0,    6,    5,    4,    2,    0,    0, 7268,    1,    7],\n",
        "       [   3,    6,   11,    4,    6,    5,    9,    4, 6768,    9],\n",
        "       [   0,    1,    0,    2,   37,    6,    0,   23,    9, 6880]]"
      ],
      "metadata": {
        "id": "4o55rF2RNLlQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(10):\n",
        "  for j in range(10):\n",
        "    if i==j:\n",
        "      arr[i][j]=0\n",
        "\n",
        "arr"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yk9ZMxJZUHMQ",
        "outputId": "0fdbff89-7383-4587-a0eb-5eb96053a7d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[0, 1, 2, 2, 1, 0, 19, 1, 2, 2],\n",
              " [0, 0, 11, 4, 1, 9, 3, 17, 0, 1],\n",
              " [2, 3, 0, 4, 0, 0, 0, 24, 3, 0],\n",
              " [0, 0, 9, 0, 0, 23, 0, 2, 8, 2],\n",
              " [0, 4, 1, 0, 0, 0, 1, 4, 0, 32],\n",
              " [2, 0, 1, 11, 0, 0, 35, 2, 8, 2],\n",
              " [5, 3, 2, 1, 5, 5, 0, 0, 2, 0],\n",
              " [0, 6, 5, 4, 2, 0, 0, 0, 1, 7],\n",
              " [3, 6, 11, 4, 6, 5, 9, 4, 0, 9],\n",
              " [0, 1, 0, 2, 37, 6, 0, 23, 9, 0]]"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "# Visualising confusion matrix\n",
        "plt.figure(figsize = (16,14),facecolor='white')\n",
        "heatmap = sns.heatmap(arr, annot = True, annot_kws = {'size': 20}, fmt = 'd', cmap = 'YlGnBu')\n",
        "heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation = 0, ha = 'right', fontsize = 18, weight='bold')\n",
        "heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation = 0, ha = 'right', fontsize = 18, weight='bold')\n",
        "\n",
        "plt.title('Confusion Matrix\\n', fontsize = 18, color = 'darkblue')\n",
        "plt.ylabel('True label', fontsize = 14)\n",
        "plt.xlabel('Predicted label', fontsize = 14)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 876
        },
        "id": "mDgtZqZ9UX1K",
        "outputId": "108f3f11-3fbc-4169-d332-6052e500a720"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x1008 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tNyLkmN2Ue8w"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}